learning rate: 8e-6 treshold: 0.4 batch: 7 epochs: 5
Namespace(batch=7, checkpoint='../multilabel/pt', epochs=5, lang='pt', learning=8e-06, multilingual=False, saved='saved_models/all_multilingual', test_set=['test_sets/pt_test_modified.tsv'], train_set=['AfterDeepL/main_labels_only/pt_FINAL.modified.tsv.gz'], treshold=0.4)
{'dev': Dataset({
    features: ['text', 'label'],
    num_rows: 1751
}),
 'test': Dataset({
    features: ['text', 'label'],
    num_rows: 332
}),
 'train': Dataset({
    features: ['text', 'label'],
    num_rows: 7003
})}
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
{'loss': 0.2578, 'learning_rate': 6.4e-06, 'epoch': 1.0}
{'eval_loss': 0.19553802907466888, 'eval_f1': 0.7270452839629722, 'eval_roc_auc': 0.8332048656493839, 'eval_accuracy': 0.604797258709309, 'eval_runtime': 53.2883, 'eval_samples_per_second': 32.859, 'eval_steps_per_second': 1.032, 'epoch': 1.0}
{'loss': 0.1763, 'learning_rate': 4.8e-06, 'epoch': 2.0}
{'eval_loss': 0.19034230709075928, 'eval_f1': 0.7402791625124625, 'eval_roc_auc': 0.8417056033848677, 'eval_accuracy': 0.6219303255282695, 'eval_runtime': 54.7357, 'eval_samples_per_second': 31.99, 'eval_steps_per_second': 1.005, 'epoch': 2.0}
{'loss': 0.1386, 'learning_rate': 3.2e-06, 'epoch': 3.0}
{'eval_loss': 0.19504792988300323, 'eval_f1': 0.7510303030303032, 'eval_roc_auc': 0.8552354375642168, 'eval_accuracy': 0.6270702455739577, 'eval_runtime': 53.3522, 'eval_samples_per_second': 32.82, 'eval_steps_per_second': 1.031, 'epoch': 3.0}
{'loss': 0.108, 'learning_rate': 1.6e-06, 'epoch': 4.0}
{'eval_loss': 0.1984315663576126, 'eval_f1': 0.7569275644141954, 'eval_roc_auc': 0.8579775702999114, 'eval_accuracy': 0.6436322101656197, 'eval_runtime': 53.351, 'eval_samples_per_second': 32.82, 'eval_steps_per_second': 1.031, 'epoch': 4.0}
{'loss': 0.085, 'learning_rate': 0.0, 'epoch': 5.0}
{'eval_loss': 0.21182528138160706, 'eval_f1': 0.754808862916971, 'eval_roc_auc': 0.85627357808959, 'eval_accuracy': 0.6436322101656197, 'eval_runtime': 53.337, 'eval_samples_per_second': 32.829, 'eval_steps_per_second': 1.031, 'epoch': 5.0}
{'train_runtime': 3965.4349, 'train_samples_per_second': 8.83, 'train_steps_per_second': 1.262, 'train_loss': 0.1531462860869599, 'epoch': 5.0}
F1: 0.7032348804500703
              precision    recall  f1-score   support

          IN       0.76      0.41      0.53        32
          NA       0.50      0.29      0.37        17
          HI       0.47      0.51      0.49        55
          LY       0.78      0.79      0.78       113
          IP       1.00      0.25      0.40         4
          SP       0.83      0.88      0.86       113
          ID       0.56      0.47      0.51        30
          OP       0.00      0.00      0.00         0

   micro avg       0.72      0.69      0.70       364
   macro avg       0.61      0.45      0.49       364
weighted avg       0.72      0.69      0.69       364
 samples avg       0.72      0.71      0.70       364

